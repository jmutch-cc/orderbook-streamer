{"version":3,"sources":["components/Header.js","services/OrderbookService.js","components/OrderbookStreamer/Subscription.js","services/Utils.js","components/OrderbookStreamer/Stats.js","components/OrderbookStreamer/OrderRow.js","components/OrderbookStreamer/OrderTable.js","components/OrderbookStreamer/Display.js","components/OrderbookStreamer/OrderbookStreamer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","style","overflowX","title","defaultProps","OrderbookService","snapshot","0","1","lastUpdated","depth","apiKey","clientUrl","list","type","desc","res","ordered","i","length","value","Number","volume","sort","a","b","totalvolume","to","from","dp","Object","keys","forEach","key","callback","BID","map","item","P","Q","String","ASK","orders","this","getSnapshot","bidKeys","slice","topBids","bidKey","push","askKeys","topAsks","askKey","processData","update","ACTION","SIDE","undefined","console","error","exchange","fSym","tSym","url","log","client","W3CWebSocket","onopen","send","JSON","stringify","action","subs","onmessage","message","data","msg","parse","TYPE","populateSnapshot","updateSnapshot","currency","resetLastUpdated","resetSnapshot","close","orderbookService","Subscription","selectExchange","bind","selectFsym","selectTsym","subscribe","changeSubscriptionKey","changeClientUrl","changeApiKey","state","exchanges","fSyms","tSyms","subscriptionKey","axios","get","then","orderbookRes","orderbookExchanges","Data","setState","pairs","tsyms","e","target","onChange","name","id","onClick","Component","Utils","number","decimalPlaces","k","formattedNumber","toFixed","numeral","format","repeat","utils","Stats","handleChange","priceImpactVolume","toggleState","toggleDirection","updated","toggle","direction","stats","spread","midpoint","high","low","bids","asks","impact","buy","sell","averageBuyPrice","averageSellPrice","lastBid","firstAsk","parseFloat","percentage","getSpread","lowerLimit","upperLimit","bidDepthVolFrom","bidDepthVolTo","bid","bidsMap","bidsvolume","askDepthVolFrom","askDepthVolTo","ask","asksMap","asksvolume","average","bidAverage","bidTotalVol","askAverage","askTotalVol","side","bidstotalvolume","askstotalvolume","Math","min","getDepth","getPriceImpact","getStats","checked","htmlFor","formatNumber","OrderRow","indexOf","order","c","setTimeout","price","tsymPrice","totalVolume","OrderTable","containerHeight","elementHeight","getTableRows","Display","OrderbookStreamer","changeSubscription","currentComponent","setInterval","prevState","getLastUpdated","parts","split","unsubscribe","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.48beb557.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = (props) => (\r\n    <nav className=\"header navbar navbar-dark bg-dark\" style={{overflowX: 'hidden'}}>\r\n        <div className=\"text-center mx-auto\">\r\n            <div className=\"\">\r\n                <div className=\"h3 ml-3 my-auto text-light d-inline-block\">{props.title}</div>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n);\r\n\r\nHeader.defaultProps = {\r\n    title: 'App'\r\n};\r\n\r\nHeader.propTypes = {\r\n    title: PropTypes.string\r\n};\r\n\r\nexport { Header };","import { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nconst apiKey = 'df1c3574c94e2c8e04a8c74b07a60b6d2e0279f5a209d81c80973d7bffdd3908'\r\nconst clientUrl = 'wss://streamer.cryptocompare.com/v2';\r\n// let client = new W3CWebSocket(clientUrl);\r\n\r\nexport class OrderbookService {\r\n\r\n    snapshot = {0:{},1:{}};\r\n    lastUpdated = [];\r\n    depth = 2000000;\r\n    apiKey = apiKey;\r\n    clientUrl = clientUrl;\r\n    client;\r\n\r\n    processData(list, type, desc) {\r\n        // Convert to data points\r\n        let res = {};\r\n        let ordered = {};\r\n        for(let i = 0; i < list.length; i++) {\r\n            list[i] = {\r\n                value: Number(list[i]['P']),\r\n                volume: Number(list[i][['Q']]),\r\n            }\r\n        }\r\n        // Sort list just in case\r\n        list.sort(function(a, b) {\r\n            if (a.value > b.value) {\r\n                return 1;\r\n            }\r\n            else if (a.value < b.value) {\r\n                return -1;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        });\r\n        // Calculate cummulative volume\r\n        if (desc) {\r\n            for(let i = list.length - 1; i >= 0; i--) {\r\n                if (i < (list.length - 1)) {\r\n                    list[i].totalvolume = {\r\n                        to: list[i+1].totalvolume.to + list[i].volume,\r\n                        from: list[i+1].totalvolume.from + (list[i].volume * list[i].value)\r\n                    };\r\n                }\r\n                else {\r\n                    list[i].totalvolume = {\r\n                        to: list[i].volume,\r\n                        from: list[i].volume * list[i].value\r\n                    };\r\n                }\r\n                let dp = {};\r\n                dp[\"value\"] = list[i].value;\r\n                dp[type + \"volume\"] = list[i].volume;\r\n                dp[type + \"totalvolume\"] = list[i].totalvolume;\r\n                res[list[i].value*100] = dp;\r\n            }\r\n            ordered = {};\r\n            Object.keys(res).sort(function (a, b) {\r\n                return a-b;\r\n            }).forEach(function(key) {\r\n                ordered[key] = res[key];\r\n            });\r\n        }\r\n        else {\r\n            for(let i = 0; i < list.length; i++) {\r\n                if (i > 0) {\r\n                    list[i].totalvolume = {\r\n                        to: list[i-1].totalvolume.to + list[i].volume,\r\n                        from: list[i-1].totalvolume.from + (list[i].volume * list[i].value)\r\n                    };\r\n                }\r\n                else {\r\n                    list[i].totalvolume = {\r\n                        to: list[i].volume,\r\n                        from: list[i].volume * list[i].value\r\n                    };\r\n                }\r\n                let dp = {};\r\n                dp[\"value\"] = list[i].value;\r\n                dp[type + \"volume\"] = list[i].volume;\r\n                dp[type + \"totalvolume\"] = list[i].totalvolume;\r\n                res[list[i].value*100] = dp\r\n            }\r\n            ordered = {};\r\n            Object.keys(res).sort(function (a, b) {\r\n                return b-a;\r\n            }).forEach(function(key) {\r\n                ordered[key] = res[key];\r\n            });\r\n        }\r\n        return ordered;\r\n    }\r\n\r\n    populateSnapshot(snapshot, callback) {\r\n        snapshot.BID.map((item, key) => {\r\n            this.snapshot[0][item.P*100] = {\r\n                Q: item.Q,\r\n                P: String(item.P)\r\n            };\r\n        });\r\n        snapshot.ASK.map((item, key) => {\r\n            this.snapshot[1][item.P*100] = {\r\n                Q: item.Q,\r\n                P: String(item.P)\r\n            };\r\n        });\r\n        callback({orders: this.getSnapshot(), lastUpdated: this.lastUpdated});\r\n    }\r\n\r\n    getLastUpdated(){\r\n        return this.lastUpdated;\r\n    }\r\n    resetLastUpdated(){\r\n        this.lastUpdated = [];\r\n    }\r\n    resetSnapshot() {\r\n        this.snapshot = {0: {}, 1: {}};\r\n    }\r\n    getSnapshot(){\r\n        let bidKeys = Object.keys(this.snapshot[0]).sort().slice(-this.depth);\r\n        let topBids = [];\r\n        for(let bidKey of bidKeys){\r\n            topBids.push(this.snapshot[0][bidKey]);\r\n        }\r\n        let askKeys = Object.keys(this.snapshot[1]).slice(0,this.depth);\r\n        let topAsks = [];\r\n        for(let askKey of askKeys){\r\n            topAsks.push(this.snapshot[1][askKey]);\r\n        }\r\n        let bids = this.processData(topBids, 'bids', true);\r\n        let asks = this.processData(topAsks, 'asks',  false);\r\n        return {0: bids, 1: asks};\r\n    }\r\n\r\n    updateSnapshot(update, callback){\r\n        if(update.ACTION === 1){\r\n            this.snapshot[update.SIDE][update.P*100] = {'P': update.P, 'Q': update.Q};\r\n            this.lastUpdated.push(update.P);\r\n        }\r\n        if(this.snapshot[update.SIDE][update.P*100] === undefined){\r\n            console.error(\"No price \", update.P, \" found on side \", update.SIDE, ' to perform action ', update.ACTION);\r\n            return;\r\n        }\r\n        if(update.ACTION === 2){\r\n           delete this.snapshot[update.SIDE][update.P*100];\r\n        }\r\n        if(update.ACTION === 4){\r\n            this.snapshot[update.SIDE][update.P*100]['Q'] = update.Q;\r\n            this.lastUpdated.push(update.P);\r\n        }\r\n    }\r\n\r\n    subscribe(exchange, fSym, tSym, url, apiKey, callback) {\r\n        console.log('Subscribing',exchange, tSym, fSym, this.client);\r\n        this.client = new W3CWebSocket(url + '?api_key=' + apiKey);\r\n        this.client.onopen = () => {\r\n            this.client.send(JSON.stringify({\r\n                action: 'SubAdd',\r\n                subs: ['8~'+exchange+'~'+fSym+'~'+tSym],\r\n            }));\r\n        };\r\n        this.client.onmessage = (message) => {\r\n            if(message.data){\r\n                let msg = JSON.parse(message.data);\r\n                if(msg.TYPE === '9'){\r\n                    this.populateSnapshot(msg, callback);\r\n                }\r\n                if(msg.TYPE === '8'){\r\n                    this.updateSnapshot(msg);\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    unsubscribe(currency) {\r\n        this.resetLastUpdated();\r\n        this.resetSnapshot();\r\n        if(this.client != null){\r\n            this.client.close();\r\n            this.client = null;\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {OrderbookService} from './../../services/OrderbookService';\r\nconst orderbookService = new OrderbookService();\r\n\r\nclass Subscription extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.selectExchange = this.selectExchange.bind(this);\r\n        this.selectFsym = this.selectFsym.bind(this);\r\n        this.selectTsym = this.selectTsym.bind(this);\r\n        this.subscribe = this.subscribe.bind(this);\r\n        this.changeSubscriptionKey = this.changeSubscriptionKey.bind(this);\r\n        this.changeClientUrl = this.changeClientUrl.bind(this);\r\n        this.changeApiKey = this.changeApiKey.bind(this);\r\n        this.state = {\r\n            exchanges: {},\r\n            fSyms: {},\r\n            tSyms: {},\r\n            fSym: props.fSym,\r\n            tSym: props.tSym,\r\n            subscriptionKey: '',\r\n            clientUrl: props.clientUrl,\r\n            apiKey: props.apiKey,\r\n            exchange: props.exchange,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('https://min-api.cryptocompare.com/data/ob/l2/exchanges?api_key='+orderbookService.apiKey).then(orderbookRes => {\r\n            axios.get('https://min-api.cryptocompare.com/data/v4/all/exchanges')\r\n                .then(res => {\r\n                    let orderbookExchanges = {};\r\n                    for(let exchange of orderbookRes.data.Data){\r\n                        orderbookExchanges[exchange] = res.data.Data.exchanges[exchange];\r\n                    }\r\n                    this.setState({ exchanges: orderbookExchanges });\r\n                    this.setState({\r\n                        fSyms: this.state.exchanges[this.state.exchange].pairs,\r\n                        tSyms: this.state.exchanges[this.state.exchange].pairs[this.state.fSym].tsyms\r\n                    }, () => {\r\n                        this.setState({subscriptionKey: this.state.exchange + '~' + this.state.fSym + '~' + this.state.tSym});\r\n                        console.log(this.state.subscriptionKey);\r\n                    })\r\n                });\r\n            });\r\n    }\r\n\r\n    selectExchange(e){\r\n        let exchange = e.target.value;\r\n        console.log(this.state.exchanges[exchange].pairs);\r\n        let pairs = this.state.exchanges[exchange].pairs;\r\n        this.setState({\r\n            exchange: exchange,\r\n            fSyms: pairs,\r\n            tSyms: pairs[Object.keys(pairs)[0]].tsyms,\r\n            fSym: Object.keys(pairs)[0],\r\n            tSym: Object.keys(pairs[Object.keys(pairs)[0]].tsyms)[0]\r\n        }, () => {\r\n            this.setState({subscriptionKey: this.state.exchange + '~' + this.state.fSym + '~' + this.state.tSym});\r\n            console.log(this.state.subscriptionKey);\r\n        })\r\n    }\r\n\r\n    selectFsym(e){\r\n        console.log(\"Select Fsym\");\r\n        let fSym = e.target.value;\r\n        let pairs = this.state.exchanges[this.state.exchange].pairs;\r\n        this.setState({\r\n            fSym: fSym,\r\n            tSyms: pairs[fSym].tsyms,\r\n            tSym: Object.keys(pairs[fSym].tsyms)[0]\r\n        }, () => {\r\n            this.setState({subscriptionKey: this.state.exchange + '~' + this.state.fSym + '~' + this.state.tSym});\r\n        });\r\n    }\r\n\r\n    selectTsym(e){\r\n        console.log(\"Select Tsym\");\r\n        let tSym = e.target.value;\r\n        this.setState({ tSym: tSym},() => {\r\n            this.setState({subscriptionKey: this.state.exchange + '~' + this.state.fSym + '~' + this.state.tSym});\r\n        });\r\n    }\r\n\r\n    changeSubscriptionKey(e){\r\n        this.setState({ subscriptionKey: e.target.value});\r\n    }\r\n\r\n    changeClientUrl(e){\r\n        this.setState({ clientUrl: e.target.value});\r\n    }\r\n\r\n    changeApiKey(e){\r\n        this.setState({ apiKey: e.target.value});\r\n    }\r\n\r\n    subscribe(){\r\n        this.props.subscribe(this.state.subscriptionKey, this.state.clientUrl, this.state.apiKey);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"subscription row\">\r\n                    <div className={\"col-md-2\"} />\r\n                    <select className={\"browser-default custom-select col-md\"} value={this.state.exchange} onChange={this.selectExchange} name=\"exchanges\" id=\"exchanges\">\r\n                        {Object.keys(this.state.exchanges).map(exchange =>\r\n                            <option key={exchange}>{exchange}</option>\r\n                        )}\r\n                    </select>\r\n                    <select className={\"browser-default custom-select col-md\"} value={this.state.fSym} onChange={this.selectFsym} name=\"fSym\" id=\"fSym\">\r\n                        {Object.keys(this.state.fSyms).map(fSym =>\r\n                            <option key={fSym}>{fSym}</option>\r\n                        )}\r\n                    </select>\r\n                    <select className={\"browser-default custom-select col-md\"} value={this.state.tSym} onChange={this.selectTsym} name=\"tSym\" id=\"tSym\">\r\n                        {Object.keys(this.state.tSyms).map(tSym =>\r\n                            <option key={tSym}>{tSym}</option>\r\n                        )}\r\n                    </select>\r\n                    <div className={\"col-md-2\"} />\r\n                </div>\r\n                <div className={\"subscription row\"}>\r\n                    <div className={\"col-md\"}>\r\n                        <input type={\"text\"} onChange={this.changeClientUrl} value={this.state.clientUrl}></input>\r\n                    </div>\r\n                    <div className={\"col-md\"}>\r\n                        8~<input type={\"text\"} onChange={this.changeSubscriptionKey} value={this.state.subscriptionKey}></input>\r\n                    </div>\r\n                    <div className={\"col-md\"}>\r\n                        <input type={\"text\"} onChange={this.changeApiKey} value={this.state.apiKey}></input>\r\n                    </div>\r\n                    <div className={\"col-md\"}>\r\n                        <span className={\"col-md\"} onClick={this.subscribe}>\r\n                            <button type=\"button\" className=\"btn btn-primary\">Subscribe</button>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nSubscription.propTypes = {\r\n    subscribe: PropTypes.func.isRequired,\r\n};\r\n\r\nexport { Subscription };","import numeral from \"numeral\";\r\n\r\nexport class Utils {\r\n    formatNumber(number, decimalPlaces, k){\r\n        let formattedNumber = +number.toFixed(6);\r\n        if(formattedNumber > 10000 && k){\r\n            formattedNumber = numeral(formattedNumber).format(\"0,0.\"+\"0\".repeat(decimalPlaces)+\"a\");\r\n        } else {\r\n            formattedNumber = numeral(formattedNumber).format(\"0,0.\"+\"0\".repeat(decimalPlaces));\r\n        }\r\n        return formattedNumber;\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Utils } from '../../services/Utils';\r\nimport PropTypes from 'prop-types';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nconst utils = new Utils();\r\n\r\nclass Stats extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleState = this.toggleState.bind(this);\r\n        this.toggleDirection = this.toggleDirection.bind(this);\r\n        this.state = {\r\n            updated: false,\r\n            priceImpactVolume: 10,\r\n            toggle: 'sell',\r\n            direction: 'to'\r\n        };\r\n        this.stats = {\r\n            spread: {\r\n                midpoint: 0,\r\n                high: 0,\r\n                low: 0\r\n            },\r\n            depth: {\r\n                bids: {},\r\n                asks: {}\r\n            },\r\n            impact: {\r\n                buy: 0,\r\n                sell: 0,\r\n                averageBuyPrice: 0,\r\n                averageSellPrice: 0\r\n            },\r\n        }\r\n    }\r\n\r\n    toggleState(e) {\r\n        this.setState({\r\n            toggle: e.target.value\r\n        });\r\n    }\r\n    toggleDirection(e) {\r\n        this.setState({\r\n            direction: e.target.value\r\n        });\r\n    }\r\n\r\n    getSpread(bids, asks){\r\n        let lastBid = bids[0]/100;\r\n        let firstAsk = asks[0]/100;\r\n        let midpoint = parseFloat(lastBid) + ((firstAsk - lastBid )/ 2);\r\n        return {\r\n            high: lastBid,\r\n            low: firstAsk,\r\n            midpoint: midpoint\r\n        }\r\n    }\r\n\r\n    getDepth(bids, asks, percentage){\r\n        let midpoint = this.getSpread(bids, asks).midpoint;\r\n        let lowerLimit = midpoint - (midpoint*(percentage/100));\r\n        let upperLimit = midpoint + (midpoint*(percentage/100));\r\n\r\n        let bidDepthVolFrom = 0;\r\n        let bidDepthVolTo = 0;\r\n        for(let bid of bids){\r\n            if(bid/100 > lowerLimit){\r\n                bidDepthVolFrom += this.bidsMap[bid].bidsvolume;\r\n                bidDepthVolTo += this.bidsMap[bid].bidsvolume*this.bidsMap[bid].value;\r\n            }\r\n        }\r\n        let askDepthVolFrom = 0;\r\n        let askDepthVolTo = 0;\r\n        for(let ask of asks){\r\n            if(ask/100 < upperLimit){\r\n                askDepthVolFrom += this.asksMap[ask].asksvolume;\r\n                askDepthVolTo += this.asksMap[ask].asksvolume*this.asksMap[ask].value;\r\n            }\r\n        }\r\n        return {\r\n            sell :{\r\n                to: bidDepthVolTo,\r\n                from: bidDepthVolFrom\r\n            },\r\n            buy :{\r\n                to: askDepthVolTo,\r\n                from: askDepthVolFrom\r\n            }\r\n        }\r\n    }\r\n\r\n    getPriceImpact(bids, asks){\r\n        let impact = {buy: 0, sell:0, average:{buy: 0, sell:0}};\r\n        if(!this.state.priceImpactVolume){\r\n            return impact;\r\n        }\r\n        let midpoint = this.getSpread(bids, asks).midpoint;\r\n        let bidAverage =0, bidTotalVol = 0;\r\n        let askAverage =0, askTotalVol = 0;\r\n        let side = this.state.direction;\r\n        for(let bid of bids){\r\n            impact.sell = this.bidsMap[bid].value - midpoint;\r\n            if(this.bidsMap[bid].bidstotalvolume[side] > this.state.priceImpactVolume) {\r\n                bidAverage += (this.state.priceImpactVolume - bidTotalVol) * this.bidsMap[bid].value;\r\n                bidTotalVol = this.bidsMap[bid].bidstotalvolume[side];\r\n                break;\r\n            }\r\n            bidTotalVol = this.bidsMap[bid].bidstotalvolume.to;\r\n            bidAverage += (this.bidsMap[bid].bidsvolume * this.bidsMap[bid].value);\r\n        }\r\n        for(let ask of asks){\r\n            impact.buy = this.asksMap[ask].value - midpoint;\r\n            if(this.asksMap[ask].askstotalvolume[side] > this.state.priceImpactVolume) {\r\n                askAverage += ((this.state.priceImpactVolume - askTotalVol) * this.asksMap[ask].value)\r\n                askTotalVol = this.asksMap[ask].askstotalvolume[side];\r\n                break;\r\n            }\r\n            askTotalVol = this.asksMap[ask].askstotalvolume[side];\r\n            askAverage += (this.asksMap[ask].asksvolume * this.asksMap[ask].value);\r\n        }\r\n        impact.average = {\r\n            sell: bidAverage / Math.min(bidTotalVol, this.state.priceImpactVolume),\r\n            buy: askAverage / Math.min(askTotalVol, this.state.priceImpactVolume)\r\n        };\r\n        return impact;\r\n    }\r\n\r\n    getStats(){\r\n        let stats = {};\r\n        this.bidsMap = this.props.orders[0];\r\n        this.asksMap = this.props.orders[1];\r\n        let bids = Object.keys(this.props.orders[0]);\r\n        let asks = Object.keys(this.props.orders[1]);\r\n        bids.sort(function (a, b) {\r\n            return b - a;\r\n        });\r\n        asks.sort(function (a, b) {\r\n            return a - b;\r\n        });\r\n        stats.spread = this.getSpread(bids, asks);\r\n        stats.depth = this.getDepth(bids, asks, 10);\r\n        stats.impact = this.getPriceImpact(bids, asks, 0.5);\r\n        this.stats = stats;\r\n    }\r\n\r\n    handleChange = (e) =>{\r\n        this.setState({priceImpactVolume: e.target.value});\r\n    }\r\n\r\n    render() {\r\n        if(!this.props.orders || !Object.keys(this.props.orders[0]).length || !Object.keys(this.props.orders[0]).length){\r\n            return <div />;\r\n        }\r\n        this.getStats();\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"panel-body\">\r\n                    {/*<Chart bids={this.props.orders[0] ? Object.values(this.props.orders[0]): []} asks={this.props.orders[1] ? Object.values(this.props.orders[1]): []} />*/}\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md\">\r\n                            <form className=\"switch-field\">\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    id=\"switch_left\"\r\n                                    name=\"switchToggle\"\r\n                                    value=\"buy\"\r\n                                    onChange={this.toggleState}\r\n                                    checked={this.state.toggle==='buy'}\r\n                                />\r\n                                <label htmlFor=\"switch_left\">Buy</label>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    id=\"switch_right\"\r\n                                    name=\"switchToggle\"\r\n                                    value=\"sell\"\r\n                                    onChange={this.toggleState}\r\n                                    checked={this.state.toggle==='sell'}\r\n                                />\r\n                                <label htmlFor=\"switch_right\">Sell</label>\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"col-md\">\r\n                            <form className=\"switch-field direction\">\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    id=\"switch_direction_to\"\r\n                                    name=\"switchToggle\"\r\n                                    value=\"from\"\r\n                                    onChange={this.toggleDirection}\r\n                                    checked={this.state.direction==='from'}\r\n                                />\r\n                                <label htmlFor=\"switch_direction_to\"><i className=\"fa fa-exchange\"></i>BTC</label>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    id=\"switch_direction_from\"\r\n                                    name=\"switchToggle\"\r\n                                    value=\"to\"\r\n                                    onChange={this.toggleDirection}\r\n                                    checked={this.state.direction==='to'}\r\n                                />\r\n                                <label htmlFor=\"switch_direction_from\"><i className=\"fa fa-exchange\"></i>USDT</label>\r\n                            </form>\r\n                            <input className=\"form-control price-impact\" type=\"text\" value={this.state.priceImpactVolume} onChange={this.handleChange}/>\r\n                        </div>\r\n                        <div className=\"col-md\">\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md col-stat\">\r\n                            <div className=\"stat-wrapper\">\r\n                                <div className=\"stat-label\">\r\n                                    10% Bid Depth\r\n                                </div>\r\n                                <div className=\"stat-data\">\r\n                                    {this.props.fSym} {utils.formatNumber(this.stats.depth[this.state.toggle].from, 2, true)}\r\n                                    ( {this.props.tSym} {utils.formatNumber(this.stats.depth[this.state.toggle].to, 2, true)} )\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md col-stat\">\r\n                            <div className=\"stat-wrapper\">\r\n                                <div className=\"stat-label\">\r\n                                    Price Impact\r\n                                </div>\r\n                                <div className={`stat-data ${this.stats.impact[this.state.toggle] >= 0 ? 'up-text' : 'down-text'}`}>\r\n                                    {this.props.tSym} {utils.formatNumber(this.stats.impact[this.state.toggle], 3, true)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md col-stat\">\r\n                            <div className=\"stat-wrapper\">\r\n                                <div className=\"stat-label\">\r\n                                    Price Impact %\r\n                                </div>\r\n                                <div className={`stat-data ${this.stats.impact[this.state.toggle] >= 0 ? 'up-text' : 'down-text'}`}>\r\n                                    { utils.formatNumber((this.stats.impact[this.state.toggle] / this.stats.spread.midpoint) * 100, 3, true) || 0 }%\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md\">\r\n                            <div className=\"stat-wrapper\">\r\n                                <div className=\"stat-label\">\r\n                                    Average Price\r\n                                </div>\r\n                                <div className=\"stat-data\">\r\n                                    {this.props.tSym} {utils.formatNumber(this.stats.impact.average[this.state.toggle], 2, true)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className={\"col-md\"}>\r\n                        </div>\r\n                        <div className=\"col-md\">\r\n                            Highest bid: <span className={\"up-text\"}>{utils.formatNumber(this.stats.spread.high, 2, true)}</span>\r\n                        </div>\r\n                        <div className=\"col-md\">\r\n                            <div>\r\n                                Midpoint: {utils.formatNumber(this.stats.spread.midpoint, 3, true)}\r\n                            </div>\r\n                            <div>\r\n                                Spread: {utils.formatNumber(this.stats.spread.low - this.stats.spread.high, 3, true)}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md\">\r\n                            Lowest ask: <span className={\"down-text\"}>{utils.formatNumber(this.stats.spread.low, 2, true)}</span>\r\n                        </div>\r\n                        <div className={\"col-md\"}>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nStats.propTypes = {\r\n    orders: PropTypes.object.isRequired,\r\n    fSym: PropTypes.string.isRequired,\r\n    tSym: PropTypes.string.isRequired,\r\n};\r\n\r\nexport { Stats };","import React, { Component } from \"react\";\r\nimport { Utils } from '../../services/Utils';\r\nimport PropTypes from 'prop-types';\r\nconst utils = new Utils();\r\n\r\nclass OrderRow extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if(!this.updated && this.props.lastUpdated.indexOf(Number(this.props.order.value)) !== -1){\r\n            this.updated = true;\r\n            let c = this;\r\n            setTimeout(function(){\r\n                c.updated = false;\r\n            }, 100);\r\n        }\r\n        this.price = this.props.order.value;\r\n        this.volume = this.props.order.bidsvolume || this.props.order.asksvolume;\r\n        this.tsymPrice = this.props.order.value * (this.props.order.bidsvolume || this.props.order.asksvolume || 0)\r\n        this.totalVolume = this.props.order.bidstotalvolume || this.props.order.askstotalvolume;\r\n        return (\r\n\r\n            <div className={\r\n                `row data-row ${this.updated ? 'highlight' : ''}`\r\n                }>\r\n                <div className=\"col-md\">\r\n                    {utils.formatNumber(this.price, 2)}\r\n                </div>\r\n                <div className=\"col-md\">\r\n                    {utils.formatNumber(this.volume, 6)}\r\n                </div>\r\n                <div className=\"col-md\">\r\n                    {utils.formatNumber(this.tsymPrice, 4, true)}\r\n                </div>\r\n                <div className=\"col-md\">\r\n                    {utils.formatNumber(this.totalVolume['from'],2, true)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nOrderRow.propTypes = {\r\n    lastUpdated: PropTypes.array.isRequired,\r\n    order: PropTypes.object.isRequired,\r\n};\r\n\r\nexport { OrderRow };","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Infinite from 'react-infinite';\r\nimport {OrderRow} from './OrderRow';\r\nimport { Utils } from '../../services/Utils';\r\nconst utils = new Utils();\r\n\r\nclass OrderTable extends Component {\r\n\r\n    getTableRows(props) {\r\n        return this.props.keys.map((key) => {\r\n            return (\r\n                <OrderRow lastUpdated={props.lastUpdated} order={props.orders[key]} key={key}/>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let totalVolume;\r\n        if(!this.props.orders || !this.props.keys.length){\r\n            return <div/>\r\n        }\r\n        if(this.props.title === 'Buy'){\r\n            totalVolume = {\r\n                to: this.props.orders[this.props.keys[this.props.keys.length-1]].bidstotalvolume.to,\r\n                from: this.props.orders[this.props.keys[this.props.keys.length-1]].bidstotalvolume.from\r\n            };\r\n        } else {\r\n            totalVolume = {\r\n                to: this.props.orders[this.props.keys[this.props.keys.length-1]].askstotalvolume.to,\r\n                from: this.props.orders[this.props.keys[this.props.keys.length-1]].askstotalvolume.from\r\n            };\r\n        }\r\n        return (\r\n        <div>\r\n            <div className={\"row\"}>\r\n                <div className=\"col-md\">\r\n                    {this.props.fSym} {utils.formatNumber(totalVolume.to, 2, true)}\r\n                </div>\r\n                <div className=\"col-md\">\r\n                    <h4>{this.props.title}</h4>\r\n                </div>\r\n                <div className=\"col-md\">\r\n                    {this.props.tSym} {utils.formatNumber(totalVolume.from, 2, true)}\r\n                </div>\r\n            </div>\r\n            <div className=\"orderbook\">\r\n                <div className=\"row title-row\">\r\n                    <div className=\"col-md\">\r\n                        Price\r\n                    </div>\r\n                    <div className=\"col-md\">\r\n                        {this.props.fSym}\r\n                    </div>\r\n                    <div className=\"col-md\">\r\n                        {this.props.tSym}\r\n                    </div>\r\n                    <div className=\"col-md\">\r\n                        Sum({this.props.tSym})\r\n                    </div>\r\n                </div>\r\n                <Infinite containerHeight={400} elementHeight={21}>\r\n                    {this.getTableRows(this.props)}\r\n                </Infinite>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nOrderTable.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    fSym: PropTypes.string.isRequired,\r\n    tSym: PropTypes.string.isRequired,\r\n    keys: PropTypes.array.isRequired,\r\n    orders: PropTypes.object.isRequired\r\n};\r\n\r\nexport { OrderTable };","import React, { Component} from 'react';\r\nimport {Stats} from './Stats';\r\nimport {OrderTable} from './OrderTable';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Display extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            orders: [],\r\n            lastUpdated: [],\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if(!Object.keys(this.props.orders).length){\r\n            return <div/>;\r\n        }\r\n        let bidKeys = Object.keys(this.props.orders[0]);\r\n        let askKeys = Object.keys(this.props.orders[1]);\r\n        bidKeys.sort(function(a,b){return b-a});\r\n        askKeys.sort(function(a,b){return a-b});\r\n        return (\r\n            <div className=\"container\">\r\n                <Stats fSym={this.props.fSym} tSym={this.props.tSym} orders={this.props.orders}></Stats>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                        <OrderTable\r\n                            fSym={this.props.fSym}\r\n                            tSym={this.props.tSym}\r\n                            orders={this.props.orders[0]}\r\n                            keys={bidKeys}\r\n                            lastUpdated={this.props.lastUpdated}\r\n                            title='Buy' />\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                        <OrderTable\r\n                            fSym={this.props.fSym}\r\n                            tSym={this.props.tSym}\r\n                            orders={this.props.orders[1]}\r\n                            keys={askKeys}\r\n                            lastUpdated={this.props.lastUpdated}\r\n                            title='Sell'/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDisplay.propTypes = {\r\n    orders: PropTypes.object.isRequired,\r\n    keys: PropTypes.array,\r\n    lastUpdated: PropTypes.array.isRequired,\r\n    fSym: PropTypes.string.isRequired,\r\n    tSym: PropTypes.string.isRequired,\r\n};\r\n\r\nexport { Display };","import React, { Component } from 'react';\r\nimport { Subscription } from './Subscription';\r\nimport { Display } from './Display';\r\nimport { OrderbookService } from '../../services/OrderbookService';\r\nimport PropTypes from 'prop-types';\r\nconst orderbookService = new OrderbookService();\r\n\r\nclass OrderbookStreamer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.changeSubscription = this.changeSubscription.bind(this);\r\n        this.state = {\r\n            orders: {},\r\n            lastUpdated: [],\r\n            exchange: props.exchange,\r\n            fSym: props.fSym,\r\n            tSym: props.tSym\r\n        };\r\n        let currentComponent = this;\r\n         setInterval(function(){\r\n            currentComponent.setState(prevState => {\r\n                return { orders: orderbookService.getSnapshot(), lastUpdated: orderbookService.getLastUpdated() }\r\n            });\r\n            orderbookService.resetLastUpdated();\r\n        }, 150);\r\n    }\r\n\r\n    subscribe(exchange, fSym, tSym, url, apiKey){\r\n        let currentComponent = this;\r\n        currentComponent.callback = (data) => {\r\n            this.setState(prevState => {\r\n                return {orders: data.orders,\r\n                    lastUpdated: orderbookService.getLastUpdated()};\r\n            });\r\n            orderbookService.resetLastUpdated();\r\n        }\r\n        orderbookService.subscribe( exchange, fSym, tSym, url, apiKey, currentComponent.callback );\r\n    }\r\n\r\n    changeSubscription(subscriptionKey, url, apiKey){\r\n        let parts = subscriptionKey.split('~');\r\n        let exchange = parts[0];\r\n        let fSym = parts[1];\r\n        let tSym = parts[2];\r\n        orderbookService.unsubscribe();\r\n        this.setState({\r\n            exchange: exchange,\r\n            fSym: fSym,\r\n            tSym: tSym,\r\n        });\r\n        this.subscribe(exchange, fSym, tSym, url, apiKey);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Subscription\r\n                    subscribe={this.changeSubscription}\r\n                    clientUrl={orderbookService.clientUrl}\r\n                    apiKey={orderbookService.apiKey}\r\n                    exchange={this.state.exchange}\r\n                    fSym={this.state.fSym}\r\n                    tSym={this.state.tSym}\r\n                />\r\n                <Display\r\n                    fSym={this.state.fSym}\r\n                    tSym={this.state.tSym}\r\n                    orders={this.state.orders}\r\n                    lastUpdated={this.state.lastUpdated}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nOrderbookStreamer.propTypes = {\r\n    exchange: PropTypes.string.isRequired,\r\n    fSym: PropTypes.string.isRequired,\r\n    tSym: PropTypes.string.isRequired,\r\n};\r\n\r\nexport { OrderbookStreamer };","import React from 'react';\r\nimport { Header } from './components/Header';\r\nimport { OrderbookStreamer } from \"./components/OrderbookStreamer/OrderbookStreamer\";\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Header title='CryptoCompare Orderbook L2 Streamer' />\r\n        <OrderbookStreamer exchange={'Binance'} fSym={'BTC'} tSym={'USDT'}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}